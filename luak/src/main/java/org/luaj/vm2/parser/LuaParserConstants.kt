/* Generated By:JavaCC: Do not edit this line. LuaParserConstants.java */
package org.luaj.vm2.parser


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
interface LuaParserConstants {
    companion object {

        /** End of File.  */
        @JvmField val EOF = 0
        /** RegularExpression Id.  */
        @JvmField val COMMENT = 17
        /** RegularExpression Id.  */
        @JvmField val LONGCOMMENT0 = 18
        /** RegularExpression Id.  */
        @JvmField val LONGCOMMENT1 = 19
        /** RegularExpression Id.  */
        @JvmField val LONGCOMMENT2 = 20
        /** RegularExpression Id.  */
        @JvmField val LONGCOMMENT3 = 21
        /** RegularExpression Id.  */
        @JvmField val LONGCOMMENTN = 22
        /** RegularExpression Id.  */
        @JvmField val LONGSTRING0 = 23
        /** RegularExpression Id.  */
        @JvmField val LONGSTRING1 = 24
        /** RegularExpression Id.  */
        @JvmField val LONGSTRING2 = 25
        /** RegularExpression Id.  */
        @JvmField val LONGSTRING3 = 26
        /** RegularExpression Id.  */
        @JvmField val LONGSTRINGN = 27
        /** RegularExpression Id.  */
        @JvmField val AND = 29
        /** RegularExpression Id.  */
        @JvmField val BREAK = 30
        /** RegularExpression Id.  */
        @JvmField val DO = 31
        /** RegularExpression Id.  */
        @JvmField val ELSE = 32
        /** RegularExpression Id.  */
        @JvmField val ELSEIF = 33
        /** RegularExpression Id.  */
        @JvmField val END = 34
        /** RegularExpression Id.  */
        @JvmField val FALSE = 35
        /** RegularExpression Id.  */
        @JvmField val FOR = 36
        /** RegularExpression Id.  */
        @JvmField val FUNCTION = 37
        /** RegularExpression Id.  */
        @JvmField val GOTO = 38
        /** RegularExpression Id.  */
        @JvmField val IF = 39
        /** RegularExpression Id.  */
        @JvmField val IN = 40
        /** RegularExpression Id.  */
        @JvmField val LOCAL = 41
        /** RegularExpression Id.  */
        @JvmField val NIL = 42
        /** RegularExpression Id.  */
        @JvmField val NOT = 43
        /** RegularExpression Id.  */
        @JvmField val OR = 44
        /** RegularExpression Id.  */
        @JvmField val RETURN = 45
        /** RegularExpression Id.  */
        @JvmField val REPEAT = 46
        /** RegularExpression Id.  */
        @JvmField val THEN = 47
        /** RegularExpression Id.  */
        @JvmField val TRUE = 48
        /** RegularExpression Id.  */
        @JvmField val UNTIL = 49
        /** RegularExpression Id.  */
        @JvmField val WHILE = 50
        /** RegularExpression Id.  */
        @JvmField val NAME = 51
        /** RegularExpression Id.  */
        @JvmField val NUMBER = 52
        /** RegularExpression Id.  */
        @JvmField val FLOAT = 53
        /** RegularExpression Id.  */
        @JvmField val FNUM = 54
        /** RegularExpression Id.  */
        @JvmField val DIGIT = 55
        /** RegularExpression Id.  */
        @JvmField val EXP = 56
        /** RegularExpression Id.  */
        @JvmField val HEX = 57
        /** RegularExpression Id.  */
        @JvmField val HEXNUM = 58
        /** RegularExpression Id.  */
        @JvmField val HEXDIGIT = 59
        /** RegularExpression Id.  */
        @JvmField val HEXEXP = 60
        /** RegularExpression Id.  */
        @JvmField val STRING = 61
        /** RegularExpression Id.  */
        @JvmField val CHARSTRING = 62
        /** RegularExpression Id.  */
        @JvmField val QUOTED = 63
        /** RegularExpression Id.  */
        @JvmField val DECIMAL = 64
        /** RegularExpression Id.  */
        @JvmField val DBCOLON = 65
        /** RegularExpression Id.  */
        @JvmField val UNICODE = 66
        /** RegularExpression Id.  */
        @JvmField val CHAR = 67
        /** RegularExpression Id.  */
        @JvmField val LF = 68

        /** Lexical state.  */
        @JvmField val DEFAULT = 0
        /** Lexical state.  */
        @JvmField val IN_COMMENT = 1
        /** Lexical state.  */
        @JvmField val IN_LC0 = 2
        /** Lexical state.  */
        @JvmField val IN_LC1 = 3
        /** Lexical state.  */
        @JvmField val IN_LC2 = 4
        /** Lexical state.  */
        @JvmField val IN_LC3 = 5
        /** Lexical state.  */
        @JvmField val IN_LCN = 6
        /** Lexical state.  */
        @JvmField val IN_LS0 = 7
        /** Lexical state.  */
        @JvmField val IN_LS1 = 8
        /** Lexical state.  */
        @JvmField val IN_LS2 = 9
        /** Lexical state.  */
        @JvmField val IN_LS3 = 10
        /** Lexical state.  */
        @JvmField val IN_LSN = 11

        /** Literal token values.  */
        @JvmField val tokenImage = arrayOf(
            "<EOF>",
            "\" \"",
            "\"\\t\"",
            "\"\\n\"",
            "\"\\r\"",
            "\"\\f\"",
            "\"--[[\"",
            "\"--[=[\"",
            "\"--[==[\"",
            "\"--[===[\"",
            "<token of kind 10>",
            "\"[[\"",
            "\"[=[\"",
            "\"[==[\"",
            "\"[===[\"",
            "<token of kind 15>",
            "\"--\"",
            "<COMMENT>",
            "\"]]\"",
            "\"]=]\"",
            "\"]==]\"",
            "\"]===]\"",
            "<LONGCOMMENTN>",
            "\"]]\"",
            "\"]=]\"",
            "\"]==]\"",
            "\"]===]\"",
            "<LONGSTRINGN>",
            "<token of kind 28>",
            "\"and\"",
            "\"break\"",
            "\"do\"",
            "\"else\"",
            "\"elseif\"",
            "\"end\"",
            "\"false\"",
            "\"for\"",
            "\"function\"",
            "\"goto\"",
            "\"if\"",
            "\"in\"",
            "\"local\"",
            "\"nil\"",
            "\"not\"",
            "\"or\"",
            "\"return\"",
            "\"repeat\"",
            "\"then\"",
            "\"true\"",
            "\"until\"",
            "\"while\"",
            "<NAME>",
            "<NUMBER>",
            "<FLOAT>",
            "<FNUM>",
            "<DIGIT>",
            "<EXP>",
            "<HEX>",
            "<HEXNUM>",
            "<HEXDIGIT>",
            "<HEXEXP>",
            "<STRING>",
            "<CHARSTRING>",
            "<QUOTED>",
            "<DECIMAL>",
            "\"::\"",
            "<UNICODE>",
            "<CHAR>",
            "<LF>",
            "\"#\"",
            "\";\"",
            "\"=\"",
            "\",\"",
            "\".\"",
            "\":\"",
            "\"(\"",
            "\")\"",
            "\"[\"",
            "\"]\"",
            "\"...\"",
            "\"{\"",
            "\"}\"",
            "\"+\"",
            "\"-\"",
            "\"*\"",
            "\"/\"",
            "\"^\"",
            "\"%\"",
            "\"..\"",
            "\"<\"",
            "\"<=\"",
            "\">\"",
            "\">=\"",
            "\"==\"",
            "\"~=\""
        )
    }

}
